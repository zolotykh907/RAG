import faiss
import numpy as np
from sentence_transformers import SentenceTransformer

def test_faiss_index(index_path: str, test_query: str = "–ø—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞"):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É FAISS –∏–Ω–¥–µ–∫—Å–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–±–Ω—ã–π –ø–æ–∏—Å–∫.
    
    Args:
        index_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–Ω–¥–µ–∫—Å–∞ FAISS
        test_query: –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
    """
    try:
        # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–µ–∫—Å–∞
        print(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏–∑ {index_path}...")
        index = faiss.read_index(index_path)
        print(f"‚úÖ –ò–Ω–¥–µ–∫—Å –∑–∞–≥—Ä—É–∂–µ–Ω. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ–∫—Ç–æ—Ä–æ–≤: {index.ntotal}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
        dim = index.d
        print(f"üìè –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–æ–≤: {dim}")
        
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
        model = SentenceTransformer("sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2")  # –¢–∞–∫–∞—è –∂–µ –º–æ–¥–µ–ª—å, –∫–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞
        query_embedding = model.encode([test_query], normalize_embeddings=True)
        query_embedding = np.array(query_embedding, dtype=np.float32)
        
        # 4. –ü–æ–∏—Å–∫ –≤ –∏–Ω–¥–µ–∫—Å–µ
        k = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π
        distances, indices = index.search(query_embedding, k)
        
        print("\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:")
        print(f"–ó–∞–ø—Ä–æ—Å: '{test_query}'")
        print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã: {indices[0]}")
        print(f"–î–∏—Å—Ç–∞–Ω—Ü–∏–∏: {distances[0]}")
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (–¥–µ–º–æ)
        if index.ntotal > 0 and indices[0][0] >= 0:
            print("\nüü¢ –ò–Ω–¥–µ–∫—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("\nüü° –í–Ω–∏–º–∞–Ω–∏–µ: –∏–Ω–¥–µ–∫—Å –ø—É—Å—Ç –∏–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
    except Exception as e:
        print(f"\nüî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞: {str(e)}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–Ω–¥–µ–∫—Å—É
    test_faiss_index(
        index_path="data/RuBQ_index.index",
        test_query="–ö–æ–≥–¥–∞ –æ—Å–Ω–æ–≤–∞–Ω –¶–°–ö–ê"  # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    )